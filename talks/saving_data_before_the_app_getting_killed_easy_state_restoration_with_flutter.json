{
    "speakers": [
      {
        "name": "Lucas Goldner",
        "bio": "About",
        "companyName": "",
        "companyUrl": "",
        "githubUrlOrHandle": "https://github.com/lucas-goldner",
        "xUrlOrHandle": "LucasGoldner",
        "linkedinUrlOrHandle": "",
        "webUrl": ""
      }
    ],
    "title": "Saving data before the app getting killed! Easy state restoration with Flutter",
    "description": "Imagine this scenario as a user: You are writing a long text in an app, keep switching between various apps, and return to the app, but notice the OS killed it! Now, all your written text is gone. What a terrible UX! How can we, as developers, help the user avoid running into this worst-case scenario? Simply keep and restore the appâ€™s state! We always discuss state management but forget about restoration. For my newest app, \"Japanana,\" I needed to include this feature. So, I will explain the implementation with an actual example. In this talk, I want to:\r\n\r\n- Show how to enable state restoration\r\n- Explain the differences between iOS and Android\r\n- Implement the restoration of our app state and discuss various strategies including navigation\r\n- Learn about multiple possibly unheard types such as RestorableInt and RestorableString\r\n- Adjust our tests with this new behaviour",
    "videoUrl": "",
    "resources": [
      {
        "label": "Slides",
        "url": "https://state-restoration-presentation.vercel.app/#/speaker"
      }
    ],
    "recommendations": [
      {
        "tool": "",
        "url": "",
        "comment": ""
      }
    ],
    "level": "Advanced",
    "topics": [
      "Application Architecture - Navigation",
      "Flutter Multiplatform (Desktop, Web, Embedded, etc)",
      "State Management",
      "Testing"
    ],
    "day": "Wednesday",
    "time": "3:45 PM",
    "startsAt": "2024-07-03T13:45:00.000Z",
    "endsAt": "2024-07-03T14:05:00.000Z",
    "room": "Widget Way",
    "format": "Lightning talk"
  }
  